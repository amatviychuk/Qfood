{"version":3,"sources":["jsons sync /^/.//.*/.json$","components/MenuBlock.js","components/Header.js","components/Restaurant.js","components/App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","MenuBlock","renderBlock","this","props","block","line","i","className","key","style","React","Component","Header","state","isOpen","renderLinks","blocks","href","onClick","setState","name","Restaurant","rest_name","location","search","substr","data","console","log","d","renderBlocks","require","error","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d3d9016b.chunk.js","sourcesContent":["var map = {\n\t\"./bestpizza.json\": 31,\n\t\"./goodfood.json\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 30;","import React from 'react';\nimport './MenuBlock.css';\n// import Background from './../images/back1.png';\n\nclass MenuBlock extends React.Component {\n    render() {\n\n      var sectionStyle = {\n         // backgroundImage: `url(${Background})`\n      }\n\n      const renderBlock = this.props.block['products'].map((line, i) => {\n         switch(line['type']) {\n            case 'small_title':\n               return (\n               <div className='small_name' key={i}>-{line['text']}-</div>\n               );\n\n            case 'price_label':\n               return (\n               <div className='price_label' key={i}>{line['text']}</div>\n               );\n\n            case 'meal':\n               return (\n               <div key={i}>\n                  <div className='product'>\n                     <div className='name'>{line['name']}</div>\n                     <div className='dots'/>\n                     <div className='price'>{line['price']}</div>\n                  </div>\n\n                  <div className='ingredients'>{line['description']}</div>\n               </div>\n               );\n\n            default:\n            break;\n         }\n         return null;\n      });\n\n      return (\n         <div className='block' style={sectionStyle} id={this.props.block['name']}>\n            <div className='block_name'>{ this.props.block['name'] }</div>\n            {renderBlock}\n         </div>\n      );\n   }\n}\n\nexport default MenuBlock;","import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    render() {\n        const openCloseHeader = () => {this.setState({isOpen:!this.state.isOpen})}\n        const renderLinks = this.props.blocks.map((block, i) => {\n            return (\n                <a key={i} href={'#'+block['name']}>\n                    <span>{block['name']}</span>\n                </a>\n            );\n        });\n        return (\n        <div onClick={openCloseHeader} className='header'>{this.props.name} {this.state.isOpen?renderLinks:null} </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './Restaurant.css';\nimport MenuBlock from './MenuBlock';\nimport Header from './Header';\n\nclass Restaurant extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {data: null};\n    }\n\n    rest_name = this.props.location.search.substr(3);\n\n    render() {\n\n        console.log(this.props.location.search);\n\n        const { data } = this.state;\n\n        if (data != null) {\n            const renderBlocks = data['blocks'].map((block, i) => {\n                return (\n                    <MenuBlock block={block} key={i}/>\n                );\n            });\n\n            return (\n                <div>\n                    <Header name={data['rest_name']} blocks={data['blocks']}/>\n                    <div className='menu_column'>\n                        {renderBlocks}\n                    </div>\n                </div>\n            );\n        } else {\n            var d;\n            try {\n                d = require('../jsons/' + this.rest_name + '.json');\n            } catch (error) {\n                return (<p>Menu not found:(</p>)\n            }\n            \n            this.setState({ data: d })\n            return (<p>Menu not found:(</p>)\n        }\n    }\n}\n\nexport default Restaurant;\n","import React from 'react';\nimport './App.css';\nimport Restaurant from './Restaurant';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/rest\" component={Restaurant} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}