{"version":3,"sources":["components/MenuBlock.js","components/Header.js","components/Restaurant.js","components/App.js","serviceWorker.js","index.js"],"names":["MenuBlock","renderBlock","this","props","block","map","line","i","className","key","style","id","React","Component","Header","state","isOpen","renderLinks","blocks","href","onClick","setState","name","Restaurant","rest_name","match","params","uploadHandler","fetch","then","response","json","success","data","catch","error","console","log","renderBlocks","Data","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"s+FAmDeA,G,mLA5CT,IAIMC,EAAcC,KAAKC,MAAMC,MAAX,SAA6BC,KAAI,SAACC,EAAMC,GACzD,OAAOD,EAAI,MACR,IAAK,cACF,OACA,yBAAKE,UAAU,aAAaC,IAAKF,GAAjC,IAAsCD,EAAI,KAA1C,KAGH,IAAK,cACF,OACA,yBAAKE,UAAU,cAAcC,IAAKF,GAAID,EAAI,MAG7C,IAAK,OACF,OACA,yBAAKG,IAAKF,GACP,yBAAKC,UAAU,WACZ,yBAAKA,UAAU,QAAQF,EAAI,MAC3B,yBAAKE,UAAU,SACf,yBAAKA,UAAU,SAASF,EAAI,QAG/B,yBAAKE,UAAU,eAAeF,EAAI,cAO3C,OAAO,QAGV,OACG,yBAAKE,UAAU,QAAQE,MApCP,GAoC4BC,GAAIT,KAAKC,MAAMC,MAAX,MAC7C,yBAAKI,UAAU,cAAeN,KAAKC,MAAMC,MAAX,MAC7BH,O,GAzCWW,IAAMC,YCsBfC,G,wDAtBX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAQ,GAHG,E,qDAOT,IAAD,OAECC,EAAcf,KAAKC,MAAMe,OAAOb,KAAI,SAACD,EAAOG,GAC9C,OACI,uBAAGE,IAAKF,EAAGY,KAAM,IAAIf,EAAK,MACtB,8BAAOA,EAAK,UAIxB,OACA,yBAAKgB,QATmB,WAAO,EAAKC,SAAS,CAACL,QAAQ,EAAKD,MAAMC,UASlCR,UAAU,UAAUN,KAAKC,MAAMmB,KAA9D,IAAqEpB,KAAKa,MAAMC,OAAOC,EAAY,KAAnG,S,GAlBaL,IAAMC,Y,QCkDZU,E,kDA9CX,WAAapB,GAAQ,IAAD,8BAChB,cAAMA,IAIVqB,UAAY,EAAKrB,MAAMsB,MAAMC,OAAOF,UALhB,EAOpBG,cAAgB,WACZC,MAAM,mGACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAEY,KAAMD,OAEvBE,OAAM,SAACC,GAENC,QAAQC,IAAIF,OAbhB,EAAKpB,MAAQ,CAACkB,KAAM,MAFJ,E,qDAmBV,IAEEA,EAAS/B,KAAKa,MAAdkB,KAER,GAAY,MAARA,EAAc,CACd,IAAMK,EAAeL,EAAI,OAAW5B,KAAI,SAACD,EAAOG,GAC5C,OACI,kBAAC,EAAD,CAAWH,MAAOA,EAAOK,IAAKF,OAItC,OACI,6BACI,kBAAC,EAAD,CAAQe,KAAMW,EAAI,UAAef,OAAQe,EAAI,SAC7C,yBAAKzB,UAAU,eACV8B,IAOb,OADApC,KAAKmB,SAAS,CAAEY,KAAMM,IACd,6C,GA1CK3B,IAAMC,W,eCOhB2B,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWpB,MCInCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCZNuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.e102c174.chunk.js","sourcesContent":["import React from 'react';\nimport './MenuBlock.css';\n// import Background from './../images/back1.png';\n\nclass MenuBlock extends React.Component {\n    render() {\n\n      var sectionStyle = {\n         // backgroundImage: `url(${Background})`\n      }\n\n      const renderBlock = this.props.block['products'].map((line, i) => {\n         switch(line['type']) {\n            case 'small_title':\n               return (\n               <div className='small_name' key={i}>-{line['text']}-</div>\n               );\n\n            case 'price_label':\n               return (\n               <div className='price_label' key={i}>{line['text']}</div>\n               );\n\n            case 'meal':\n               return (\n               <div key={i}>\n                  <div className='product'>\n                     <div className='name'>{line['name']}</div>\n                     <div className='dots'/>\n                     <div className='price'>{line['price']}</div>\n                  </div>\n\n                  <div className='ingredients'>{line['description']}</div>\n               </div>\n               );\n\n            default:\n            break;\n         }\n         return null;\n      });\n\n      return (\n         <div className='block' style={sectionStyle} id={this.props.block['name']}>\n            <div className='block_name'>{ this.props.block['name'] }</div>\n            {renderBlock}\n         </div>\n      );\n   }\n}\n\nexport default MenuBlock;","import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    render() {\n        const openCloseHeader = () => {this.setState({isOpen:!this.state.isOpen})}\n        const renderLinks = this.props.blocks.map((block, i) => {\n            return (\n                <a key={i} href={'#'+block['name']}>\n                    <span>{block['name']}</span>\n                </a>\n            );\n        });\n        return (\n        <div onClick={openCloseHeader} className='header'>{this.props.name} {this.state.isOpen?renderLinks:null} </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './Restaurant.css';\nimport MenuBlock from './MenuBlock';\nimport Header from './Header';\nimport Data from '../jsons/menu1.json';\n\nclass Restaurant extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {data: null};\n    }\n\n    rest_name = this.props.match.params.rest_name;\n\n    uploadHandler = () => {\n        fetch('https://github.com/AndrewMos/Qfood/blob/master/qfood-back/Restaurants/good_food/2_13072020.json')\n          .then((response) => response.json())\n          .then((success) => {\n            this.setState({ data: success })\n          })\n          .catch((error) => {\n            // eslint-disable-next-line no-console\n            console.log(error);\n          });\n    };\n\n    render() {\n\n        const { data } = this.state;\n\n        if (data != null) {\n            const renderBlocks = data['blocks'].map((block, i) => {\n                return (\n                    <MenuBlock block={block} key={i}/>\n                );\n            });\n\n            return (\n                <div>\n                    <Header name={data['rest_name']} blocks={data['blocks']}/>\n                    <div className='menu_column'>\n                        {renderBlocks}\n                    </div>\n                </div>\n            );\n        } else {\n            // this.uploadHandler();\n            this.setState({ data: Data })\n            return (<p>Loading...</p>)\n        }\n    }\n}\n\nexport default Restaurant;\n","import React from 'react';\nimport './App.css';\nimport Restaurant from './Restaurant';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/Qfood/:rest_name\" component={Restaurant} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}